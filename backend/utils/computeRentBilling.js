const addRentBill = (tenant_contract, date_due, amount, info) => {
    return {
        tenant_contract,
        date_due,
        bill_type: 'Rent',
        date_received: '',
        information: info,
        amount: amount,
        status: 'Unpaid',
    }
}

// straight outta chatgpt
function addOneMonth(date) {
    // Get the current month and year
    let month = date.getMonth();
    let year = date.getFullYear();
  
    // Increment the month by 1
    month += 1;
  
    // If the incremented month is greater than 11 (December), increment the year
    if (month > 11) {
      month = 0; // January
      year++;
    }
  
    // Set the date to the new month
    date.setMonth(month);
    date.setFullYear(year);
  
    return date;
  }

export const computeRentBilling = (tenant_contract, startDate, durationInMonths, value) => {
    bills = []
    
    let monthlyDue = parseFloat(value) / parseFloat(durationInMonths)
    let currDate = Date(startDate)

    // three months deposit
    bills.push(addRentBill(tenant_contract, Date.now(), monthlyDue * 3, "Deposit"))

    // two months advance
    bills.push(addRentBill(tenant_contract, Date.now(), monthlyDue * 2, "Advance"))
    addOneMonth(currDate)
    addOneMonth(currDate)

    // ten postdated checks dated for the 7th day of the month

    let temp_month = currDate.getMonth()
    for (let i = 0; i < durationInMonths - 2; i++) {
        bills.push(addRentBill(tenant_contract, currDate, deposit, "Autogenerated Monthly Bill"))
        addOneMonth(currDate)
    }
}

//TODO:
// When bill is edited, make a function that will recompute for the 
// remaining bills 

// 1. check the schema for the paid bills and total value
// then delete them from the schema
// 2. pass these values to this function
// 3. 
// 4. call computerentbilling / 
// 5. 